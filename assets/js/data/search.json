[ { "title": "The right to bear servers", "url": "/software%20engineering/infra/2014/05/29/the-right-to-bear-servers/", "categories": "Software Engineering, Infra", "tags": "", "date": "2014-05-29 00:00:00 +0000", "snippet": "It is 1776 and a new country is being born. Over the next few decades a story of revolution, conquer, expansion will unfold; settlers and adventurers fanning out across an enourmous new continent. Law enforcement lags behind, but the newcomers must defend themselves against a tough landscape: wild animals, indigenous people, other settlers - potentially the government itself. Eager to maintain prosperity, the young government updates its foundation, adding The Second Amendment: A well regulated Militia, being necessary to the security of a free State, the right of the people to keep and bear Arms, shall not be infringed.The newcomers have the odd scuffle but conquer the entire continent. The new country is the USA and it goes on to become the world’s richest and define human progress for generations.Fast forward.It is 2014 and humans are communicating all over the planet in milliseconds. A huge, tremendously fertile place has been created where amazing new things are happening: the Internet. It is a new frontier for humanity in many of the same ways the settlers of 1776 faced.A small number of services exist in this non-place that are so good people have flocked to them, creating huge entities and sucking away the market for alternatives. They have fancy names like “Netflix”, “Facebook”, “Twitter” and “Google”. They cost no money but their price is insanely high: privacy and decreased diversity.They are like the dinosaurs that lived millions of years ago: they have become huge because nothing constrains their growth. And so many people are addicted to them that they can do whatever they want.That is a threat to humans, and it’s one I want to fight. I want to be able to live dinosaur-free: to run my own version of these services for family and friends, and I want it to be in the form of a box I buy from Radio Shack for a few dollars.This magical device doesn’t exist yet, but when it does, it will store our files, run our email, websites, blogs, and hold data on what we’re doing in equivalents to Facebook and Twitter that talk to friends’ devices. It will be part of a global network based on permission instead of a single platform that exists to sell eyeballs to advertisers. Like the frontier people of the 18th century I propose we, the citizens of this new frontier demand that The right of the people to keep and bear Servers, shall not be infringed.Such an amendment will create a commercial climate that lets people control their own hardware and thus pay to store - and share - data privately. The only physical territory with enough control of the Internet to do this is the United States of America, founded in 1776. The USA is founded on the values of freedom and privacy and this continues that theme, so it can and should enshrine this in law.When the day comes that we can share our data only with who we choose, we will have the basic rights we take for granted in the physical world. Maybe the Internet dinosaurs will go extinct and maybe not, but either way, there will be an explosion of diversity and that will create opportunities for privacy-focused products as well. The future looks bright but we have to bring it about.We, the people of the Internet, demand the right to bear servers." }, { "title": "What&#39;s your unit of reuse?", "url": "/software%20engineering/2014/04/01/whats-your-unit-of-reuse/", "categories": "Software Engineering", "tags": "", "date": "2014-04-01 00:00:00 +0000", "snippet": "We are constantly trying to lighten our load on Earth. A lot of man-made things are designed to last beyond their useful life, going full-circle and ending up in a store after being discarded and remade. New packaging, for example, can be made from old packaging - old plastic and cardboard recycled appropriately. Mother nature has been doing this for a long time too! A great example is earthworms, which munch organic matter from dead plant material and produce lovely soil, ready for the cycle of growth to continue. Earthworms are able to do this because of the material being reused. It’s organic matter, and there’s only one kind of thing.Other “stuff” is just destined for landfill. Lots of human-made things are not easily reused: pieces of disparate material such as wood, plastic and cardboard glued together or snapped together never to come apart. I was throwing away the box from a toy helicopter the other day, and its plastic window was glued to its cardboard box. Unsure how to recycle this I shrugged and threw the whole thing in the recycle bin. I am guessing some poor person has to take that plastic and cardboard apart and put them in separate piles. It gets worse: in the computer industry we have toxic e-waste being handled by people.Code behaves similarly. When the time comes to reuse code, I like to think about this as an analogy. Code from a “good” codebase, when viewed at say 10% magnification, has a very obvious “appearance”. It’s not the same across the whole codebase though: controller code is short methods delegating work and rendering - you won’t see much nesting. Repositories look like database accessors, inheriting most of their behavior. Views are mindless puppets mostly made up of template code.In a “bad” codebase though, the same parts are there but the code has no specific appearance. All the “materials” the code is made from - models, repositories, controllers, views, helpers, services… - weave in and out with each other and are difficult to pry apart. Everything works great though until the company must react to change: Our traffic is 50% mobile! We need an app!Hopefully at least some of your code can be reused for the smartphone app. But how much must be rewritten? Will you keep the existing code or support both desktop and mobile in the new code? Unless you’ve been diligently keeping code concerns separate - keeping your “materials” easily recyclable - you have a lot of work ahead and some code will get thrown away.I’ve seen this in a complicated codebase. User interface controls designed to take up a physical region of a page on the desktop site had significant business logic in them. The business, faced with the need to support mobile devices, suddenly needed a mobile web UI, plus iOS and Android apps. That’s a total of 3 new ways to reach the same information and do the same things, but they all needed new view code. With the business logic locked up in the desktop site’s view code the company had to change. They were OK, but they learned the hard way.So rather than trying to anticipate change, try to respect the “materials” your code is made from. Remember different code has different properties. If you keep them apart nicely you can recycle them. Put them together too tightly and you’ll get an unrecyclable mess, only good for landfill. Be more like mother nature and recycle!" } ]
